"""Test methods in model.py. Uses hypothesis"""
import json
from datetime import date
from datetime import datetime
from ipaddress import IPv4Address
from ipaddress import IPv6Address
from typing import Dict
from typing import List
from typing import Tuple
from typing import Union

import pytest
from hypothesis import given
from hypothesis import strategies as st
from pydantic_aioredis.model import Model
from fakeredis.aioredis import FakeRedis
from pydantic_aioredis.config import RedisConfig
from pydantic_aioredis.model import AutoModel
from pydantic_aioredis.store import Store


class SimpleModel(Model):
    _primary_key_field: str = "test_str"
    test_str: str


async def test_update_sets_autosync_save():
    """Test that update sets autosync and save to false"""
    model = SimpleModel(test_str="test")
    model._auto_sync = True
    model._auto_save = True
    async with model.update() as cm:
        assert cm._auto_sync is False
        assert cm._auto_save is False
    assert model._auto_sync
    assert model._auto_save


@given(st.text(min_size=2), st.integers(min_value=0), st.integers(min_value=0))
@pytest.mark.asyncio  # Even though we have pytest_collection_modifyitems, hypothesis needs this mark
async def test_update_cm(test_str, test_int, update_int):
    """ """

    class UpdateModel(Model):
        _primary_key_field: str = "test_str"
        test_str: str
        test_int: int

    # instead of using a fixture, create it in the function because of hypothesis
    #  Function-scoped fixtures are not reset between examples generated by
    # `@given(...)`, which is often surprising and can cause subtle test bugs.
    redis_store = Store(
        name="sample",
        redis_config=RedisConfig(port=1024, db=1),  # nosec
        life_span_in_seconds=3600,
    )
    redis_store.redis_store = FakeRedis(decode_responses=True)
    redis_store.register_model(UpdateModel)
    this_model = UpdateModel(test_str=test_str, test_int=test_int)
    await UpdateModel.insert(this_model)
    key = f"updatemodel:{test_str}"
    async with this_model.update() as cm:
        cm.test_int = update_int
        redis_model = await UpdateModel.select(ids=[test_str])
        assert redis_model[0].test_int == test_int

    redis_model = await UpdateModel.select(ids=[test_str])
    assert redis_model[0].test_int == update_int
